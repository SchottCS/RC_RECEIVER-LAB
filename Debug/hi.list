
hi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  00006080  2**0
                  CONTENTS
  4 .ARM          00000008  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004860  08004860  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004868  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000080  080048e8  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080048e8  00006380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d53c  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e82  00000000  00000000  000135ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00015470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000980  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d69  00000000  00000000  00016a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e3  00000000  00000000  0002d781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebad  00000000  00000000  0003bd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e0  00000000  00000000  000ca954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ce134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004794 	.word	0x08004794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004794 	.word	0x08004794

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <motor_brake>:
#include "Motor_Driver.h"

#define MAX_DUTY_CYCLE 4799 // Define maximum duty cycle value

// Function to apply brake to the motor
void motor_brake(MotorDriver *motor) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    // Stop PWM for both forward and backward channels
    __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 1); // Set forward channel to minimal duty cycle
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d105      	bne.n	800059c <motor_brake+0x1c>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	635a      	str	r2, [r3, #52]	@ 0x34
 800059a:	e018      	b.n	80005ce <motor_brake+0x4e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d105      	bne.n	80005b0 <motor_brake+0x30>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80005ae:	e00e      	b.n	80005ce <motor_brake+0x4e>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d105      	bne.n	80005c4 <motor_brake+0x44>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005c2:	e004      	b.n	80005ce <motor_brake+0x4e>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 1); // Set backward channel to minimal duty cycle
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d105      	bne.n	80005e2 <motor_brake+0x62>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2201      	movs	r2, #1
 80005de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005e0:	e018      	b.n	8000614 <motor_brake+0x94>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 1); // Set backward channel to minimal duty cycle
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d105      	bne.n	80005f6 <motor_brake+0x76>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005f4:	e00e      	b.n	8000614 <motor_brake+0x94>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 1); // Set backward channel to minimal duty cycle
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b08      	cmp	r3, #8
 80005fc:	d105      	bne.n	800060a <motor_brake+0x8a>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000608:	e004      	b.n	8000614 <motor_brake+0x94>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 1); // Set backward channel to minimal duty cycle
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <motor_enable>:

// Function to enable the motor driver
void motor_enable(MotorDriver *motor) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    // Start PWM for both forward and backward channels
    HAL_TIM_PWM_Start(motor->htim, motor->forward_channel);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f001 fe9a 	bl	800236c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htim, motor->backward_channel);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	4610      	mov	r0, r2
 8000644:	f001 fe92 	bl	800236c <HAL_TIM_PWM_Start>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <motor_disable>:

// Function to disable the motor driver
void motor_disable(MotorDriver *motor) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    // Stop PWM for both forward and backward channels
    HAL_TIM_PWM_Stop(motor->htim, motor->forward_channel);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f001 ff32 	bl	80024cc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(motor->htim, motor->backward_channel);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f001 ff2a 	bl	80024cc <HAL_TIM_PWM_Stop>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <motor_set_duty_cycle>:

// Function to set the duty cycle of the motor
void motor_set_duty_cycle(MotorDriver *motor, int16_t duty_cycle) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	807b      	strh	r3, [r7, #2]
    // Check if duty cycle is within valid range (-MAX_DUTY_CYCLE to MAX_DUTY_CYCLE)
    if (duty_cycle > MAX_DUTY_CYCLE) {
 800068c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000690:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8000694:	db03      	blt.n	800069e <motor_set_duty_cycle+0x1e>
        duty_cycle = MAX_DUTY_CYCLE; // Limit duty cycle to maximum value
 8000696:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 800069a:	807b      	strh	r3, [r7, #2]
 800069c:	e007      	b.n	80006ae <motor_set_duty_cycle+0x2e>
    } else if (duty_cycle < -MAX_DUTY_CYCLE) {
 800069e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006a2:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 80006a6:	dc02      	bgt.n	80006ae <motor_set_duty_cycle+0x2e>
        duty_cycle = -MAX_DUTY_CYCLE; // Limit duty cycle to minimum value
 80006a8:	f64e 5341 	movw	r3, #60737	@ 0xed41
 80006ac:	807b      	strh	r3, [r7, #2]
    }

    // Set duty cycle for forward and backward channels based on sign of duty_cycle
    if (duty_cycle > 0) {
 80006ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd4a      	ble.n	800074c <motor_set_duty_cycle+0xcc>
        // Forward motion
        __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, duty_cycle);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d106      	bne.n	80006cc <motor_set_duty_cycle+0x4c>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	e01b      	b.n	8000704 <motor_set_duty_cycle+0x84>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d106      	bne.n	80006e2 <motor_set_duty_cycle+0x62>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006de:	6393      	str	r3, [r2, #56]	@ 0x38
 80006e0:	e010      	b.n	8000704 <motor_set_duty_cycle+0x84>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d106      	bne.n	80006f8 <motor_set_duty_cycle+0x78>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006f6:	e005      	b.n	8000704 <motor_set_duty_cycle+0x84>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d105      	bne.n	8000718 <motor_set_duty_cycle+0x98>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Stop motion
        __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 0);
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
    }
}
 8000716:	e0b6      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d105      	bne.n	800072c <motor_set_duty_cycle+0xac>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	6393      	str	r3, [r2, #56]	@ 0x38
 800072a:	e0ac      	b.n	8000886 <motor_set_duty_cycle+0x206>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	2b08      	cmp	r3, #8
 8000732:	d105      	bne.n	8000740 <motor_set_duty_cycle+0xc0>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800073e:	e0a2      	b.n	8000886 <motor_set_duty_cycle+0x206>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800074a:	e09c      	b.n	8000886 <motor_set_duty_cycle+0x206>
    } else if (duty_cycle < 0) {
 800074c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000750:	2b00      	cmp	r3, #0
 8000752:	da51      	bge.n	80007f8 <motor_set_duty_cycle+0x178>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 0); // Set forward channel to 0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <motor_set_duty_cycle+0xe8>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	e018      	b.n	800079a <motor_set_duty_cycle+0x11a>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d105      	bne.n	800077c <motor_set_duty_cycle+0xfc>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	6393      	str	r3, [r2, #56]	@ 0x38
 800077a:	e00e      	b.n	800079a <motor_set_duty_cycle+0x11a>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b08      	cmp	r3, #8
 8000782:	d105      	bne.n	8000790 <motor_set_duty_cycle+0x110>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800078e:	e004      	b.n	800079a <motor_set_duty_cycle+0x11a>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, -duty_cycle);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d107      	bne.n	80007b2 <motor_set_duty_cycle+0x132>
 80007a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007a6:	425a      	negs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007b0:	e069      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, -duty_cycle);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d108      	bne.n	80007cc <motor_set_duty_cycle+0x14c>
 80007ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007be:	4259      	negs	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	460b      	mov	r3, r1
 80007c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80007ca:	e05c      	b.n	8000886 <motor_set_duty_cycle+0x206>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d108      	bne.n	80007e6 <motor_set_duty_cycle+0x166>
 80007d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007d8:	4259      	negs	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	460b      	mov	r3, r1
 80007e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007e4:	e04f      	b.n	8000886 <motor_set_duty_cycle+0x206>
 80007e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ea:	4259      	negs	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	460b      	mov	r3, r1
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f6:	e046      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->forward_channel, 0);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <motor_set_duty_cycle+0x18c>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	@ 0x34
 800080a:	e018      	b.n	800083e <motor_set_duty_cycle+0x1be>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b04      	cmp	r3, #4
 8000812:	d105      	bne.n	8000820 <motor_set_duty_cycle+0x1a0>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	6393      	str	r3, [r2, #56]	@ 0x38
 800081e:	e00e      	b.n	800083e <motor_set_duty_cycle+0x1be>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b08      	cmp	r3, #8
 8000826:	d105      	bne.n	8000834 <motor_set_duty_cycle+0x1b4>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000832:	e004      	b.n	800083e <motor_set_duty_cycle+0x1be>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <motor_set_duty_cycle+0x1d2>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000850:	e019      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d105      	bne.n	8000866 <motor_set_duty_cycle+0x1e6>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	2300      	movs	r3, #0
 8000862:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000864:	e00f      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d105      	bne.n	800087a <motor_set_duty_cycle+0x1fa>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000878:	e005      	b.n	8000886 <motor_set_duty_cycle+0x206>
        __HAL_TIM_SET_COMPARE(motor->htim, motor->backward_channel, 0); // Set backward channel to 0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000884:	e7ff      	b.n	8000886 <motor_set_duty_cycle+0x206>
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <calculateValue>:
// Global variables to hold trigger and wheel values
uint16_t g_trigger_val = 0;
uint16_t g_wheel_val = 0;

// Function to calculate the value considering overflow and below nominal detection
static uint16_t calculateValue(uint16_t previousValue, uint32_t highPWM, uint32_t lowPWM, uint32_t nominalPWM) {
 8000892:	b480      	push	{r7}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4603      	mov	r3, r0
 80008a0:	81fb      	strh	r3, [r7, #14]
    if (previousValue > highPWM || previousValue < lowPWM) {
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d303      	bcc.n	80008b2 <calculateValue+0x20>
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d902      	bls.n	80008b8 <calculateValue+0x26>
        return nominalPWM; // Reset to nominal if overflow or below nominal
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	e000      	b.n	80008ba <calculateValue+0x28>
    }
    return previousValue;
 80008b8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <startRCReceiverCapture>:

// Function to start RC receiver capture
void startRCReceiverCapture(RCReceiver* rc) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
    // Start interrupt-based input capture for trigger and wheel channels
    HAL_TIM_IC_Start_IT(rc->htim, rc->Trigger_Channel1_Rise);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4610      	mov	r0, r2
 80008da:	f001 feab 	bl	8002634 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(rc->htim, rc->Trigger_Channel1_Fall);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f001 fea3 	bl	8002634 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(rc->htim, rc->Trigger_Channel2_Rise);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691a      	ldr	r2, [r3, #16]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f001 fe9b 	bl	8002634 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(rc->htim, rc->Trigger_Channel2_Fall);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4619      	mov	r1, r3
 8000908:	4610      	mov	r0, r2
 800090a:	f001 fe93 	bl	8002634 <HAL_TIM_IC_Start_IT>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <calculateTriggerValueCallback>:

// Callback function to handle trigger value calculation
void calculateTriggerValueCallback(RCReceiver* rc, uint16_t previousValue) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
    g_trigger_val = calculateValue(previousValue, rc->highPWM, rc->lowPWM, rc->nominalPWM);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6999      	ldr	r1, [r3, #24]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	8878      	ldrh	r0, [r7, #2]
 8000932:	f7ff ffae 	bl	8000892 <calculateValue>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <calculateTriggerValueCallback+0x30>)
 800093c:	801a      	strh	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000009c 	.word	0x2000009c

0800094c <calculateWheelValueCallback>:

// Callback function to handle wheel value calculation
void calculateWheelValueCallback(RCReceiver* rc, uint16_t previousValue) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
    g_wheel_val = calculateValue(previousValue, rc->highPWM, rc->lowPWM, rc->nominalPWM);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6999      	ldr	r1, [r3, #24]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	8878      	ldrh	r0, [r7, #2]
 8000966:	f7ff ff94 	bl	8000892 <calculateValue>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b03      	ldr	r3, [pc, #12]	@ (800097c <calculateWheelValueCallback+0x30>)
 8000970:	801a      	strh	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000009e 	.word	0x2000009e

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fd03 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f89d 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f000 fa55 	bl	8000e3c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000992:	f000 f901 	bl	8000b98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000996:	f000 f9a7 	bl	8000ce8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800099a:	f000 fa25 	bl	8000de8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r Enter a Command: Mnxy .\r\n", 29, HAL_MAX_DELAY);
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	221d      	movs	r2, #29
 80009a4:	493c      	ldr	r1, [pc, #240]	@ (8000a98 <main+0x118>)
 80009a6:	483d      	ldr	r0, [pc, #244]	@ (8000a9c <main+0x11c>)
 80009a8:	f002 fe98 	bl	80036dc <HAL_UART_Transmit>

  // Start RC receiver capture
  startRCReceiverCapture(&receiver);
 80009ac:	483c      	ldr	r0, [pc, #240]	@ (8000aa0 <main+0x120>)
 80009ae:	f7ff ff8a 	bl	80008c6 <startRCReceiverCapture>

  /* Initialize motor drivers */
  motor1.htim = &htim1;
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <main+0x124>)
 80009b4:	4a3c      	ldr	r2, [pc, #240]	@ (8000aa8 <main+0x128>)
 80009b6:	609a      	str	r2, [r3, #8]
  motor1.forward_channel = TIM_CHANNEL_1;
 80009b8:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <main+0x124>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
  motor1.backward_channel = TIM_CHANNEL_2;
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <main+0x124>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	605a      	str	r2, [r3, #4]

  motor2.htim = &htim1;
 80009c4:	4b39      	ldr	r3, [pc, #228]	@ (8000aac <main+0x12c>)
 80009c6:	4a38      	ldr	r2, [pc, #224]	@ (8000aa8 <main+0x128>)
 80009c8:	609a      	str	r2, [r3, #8]
  motor2.forward_channel = TIM_CHANNEL_3;
 80009ca:	4b38      	ldr	r3, [pc, #224]	@ (8000aac <main+0x12c>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	601a      	str	r2, [r3, #0]
  motor2.backward_channel = TIM_CHANNEL_4;
 80009d0:	4b36      	ldr	r3, [pc, #216]	@ (8000aac <main+0x12c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	605a      	str	r2, [r3, #4]


  motor_disable(&motor1);
 80009d6:	4833      	ldr	r0, [pc, #204]	@ (8000aa4 <main+0x124>)
 80009d8:	f7ff fe3a 	bl	8000650 <motor_disable>
  motor_disable(&motor2);
 80009dc:	4833      	ldr	r0, [pc, #204]	@ (8000aac <main+0x12c>)
 80009de:	f7ff fe37 	bl	8000650 <motor_disable>

  motor_enable(&motor1);
 80009e2:	4830      	ldr	r0, [pc, #192]	@ (8000aa4 <main+0x124>)
 80009e4:	f7ff fe1c 	bl	8000620 <motor_enable>
  motor_enable(&motor2);
 80009e8:	4830      	ldr	r0, [pc, #192]	@ (8000aac <main+0x12c>)
 80009ea:	f7ff fe19 	bl	8000620 <motor_enable>

  motor_brake(&motor1);
 80009ee:	482d      	ldr	r0, [pc, #180]	@ (8000aa4 <main+0x124>)
 80009f0:	f7ff fdc6 	bl	8000580 <motor_brake>
  motor_brake(&motor2);
 80009f4:	482d      	ldr	r0, [pc, #180]	@ (8000aac <main+0x12c>)
 80009f6:	f7ff fdc3 	bl	8000580 <motor_brake>

  uint16_t Trigger_Duty = 0; //returns trigger_val
 80009fa:	2300      	movs	r3, #0
 80009fc:	80fb      	strh	r3, [r7, #6]
  uint16_t Wheel_Duty = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	80bb      	strh	r3, [r7, #4]

  startRCReceiverCapture(&receiver);
 8000a02:	4827      	ldr	r0, [pc, #156]	@ (8000aa0 <main+0x120>)
 8000a04:	f7ff ff5f 	bl	80008c6 <startRCReceiverCapture>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Calculate trigger and wheel values
      calculateTriggerValueCallback(&receiver, previousTriggerValue);
 8000a08:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <main+0x130>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4823      	ldr	r0, [pc, #140]	@ (8000aa0 <main+0x120>)
 8000a12:	f7ff ff81 	bl	8000918 <calculateTriggerValueCallback>
      calculateWheelValueCallback(&receiver, previousWheelValue);
 8000a16:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <main+0x134>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <main+0x120>)
 8000a20:	f7ff ff94 	bl	800094c <calculateWheelValueCallback>

      // Prepare message with trigger and wheel values
      sprintf(message, "\n\r Trigger Channel MOT: %d (us), Wheel Channel MOT: %d (us).", g_trigger_val, g_wheel_val);
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <main+0x138>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <main+0x13c>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4924      	ldr	r1, [pc, #144]	@ (8000ac0 <main+0x140>)
 8000a30:	4824      	ldr	r0, [pc, #144]	@ (8000ac4 <main+0x144>)
 8000a32:	f003 fa0f 	bl	8003e54 <siprintf>

      // Calculate duty cycles for motor control
      Trigger_Duty = -4550 + (g_trigger_val - 1019) * (9598 / 1019);
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <main+0x138>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	00d2      	lsls	r2, r2, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f5a3 5356 	sub.w	r3, r3, #13696	@ 0x3580
 8000a46:	3b19      	subs	r3, #25
 8000a48:	80fb      	strh	r3, [r7, #6]
      Wheel_Duty = -4550 + (g_wheel_val - 1019) * (9598 / 1019);
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <main+0x13c>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f5a3 5356 	sub.w	r3, r3, #13696	@ 0x3580
 8000a5a:	3b19      	subs	r3, #25
 8000a5c:	80bb      	strh	r3, [r7, #4]

      // Set duty cycles for respective motors
      motor_set_duty_cycle(&motor1, Trigger_Duty);
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <main+0x124>)
 8000a66:	f7ff fe0b 	bl	8000680 <motor_set_duty_cycle>
      motor_set_duty_cycle(&motor2, Wheel_Duty);
 8000a6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480e      	ldr	r0, [pc, #56]	@ (8000aac <main+0x12c>)
 8000a72:	f7ff fe05 	bl	8000680 <motor_set_duty_cycle>

      // Transmit message over UART
      HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000a76:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <main+0x144>)
 8000a78:	f7ff fbb2 	bl	80001e0 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	490f      	ldr	r1, [pc, #60]	@ (8000ac4 <main+0x144>)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <main+0x11c>)
 8000a88:	f002 fe28 	bl	80036dc <HAL_UART_Transmit>

      // Delay to control the loop frequency
      HAL_Delay(200);
 8000a8c:	20c8      	movs	r0, #200	@ 0xc8
 8000a8e:	f000 fcf1 	bl	8001474 <HAL_Delay>
      calculateTriggerValueCallback(&receiver, previousTriggerValue);
 8000a92:	bf00      	nop
 8000a94:	e7b8      	b.n	8000a08 <main+0x88>
 8000a96:	bf00      	nop
 8000a98:	080047ac 	.word	0x080047ac
 8000a9c:	20000130 	.word	0x20000130
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000214 	.word	0x20000214
 8000aa8:	200000a0 	.word	0x200000a0
 8000aac:	20000220 	.word	0x20000220
 8000ab0:	20000178 	.word	0x20000178
 8000ab4:	2000017a 	.word	0x2000017a
 8000ab8:	2000009c 	.word	0x2000009c
 8000abc:	2000009e 	.word	0x2000009e
 8000ac0:	080047cc 	.word	0x080047cc
 8000ac4:	2000017c 	.word	0x2000017c

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	@ 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	@ 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 f9dc 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b38:	2319      	movs	r3, #25
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b3c:	23c0      	movs	r3, #192	@ 0xc0
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 ff65 	bl	8001a1c <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b58:	f000 fa2c 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2103      	movs	r1, #3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f9c7 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b84:	f000 fa16 	bl	8000fb4 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	@ 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b092      	sub	sp, #72	@ 0x48
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 f966 	bl	8003e94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc8:	4b45      	ldr	r3, [pc, #276]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bca:	4a46      	ldr	r2, [pc, #280]	@ (8000ce4 <MX_TIM1_Init+0x14c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bce:	4b44      	ldr	r3, [pc, #272]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b42      	ldr	r3, [pc, #264]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bdc:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000be0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf4:	483a      	ldr	r0, [pc, #232]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000bf6:	f001 fb69 	bl	80022cc <HAL_TIM_PWM_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c00:	f000 f9d8 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c10:	4619      	mov	r1, r3
 8000c12:	4833      	ldr	r0, [pc, #204]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000c14:	f002 fc3e 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c1e:	f000 f9c9 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	@ 0x60
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4826      	ldr	r0, [pc, #152]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000c48:	f001 ff9a 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c52:	f000 f9af 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4820      	ldr	r0, [pc, #128]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000c60:	f001 ff8e 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c6a:	f000 f9a3 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	2208      	movs	r2, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	481a      	ldr	r0, [pc, #104]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000c78:	f001 ff82 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000c82:	f000 f997 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000c90:	f001 ff76 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000c9a:	f000 f98b 	bl	8000fb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000cc2:	f002 fc55 	bl	8003570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000ccc:	f000 f972 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <MX_TIM1_Init+0x148>)
 8000cd2:	f000 fa2f 	bl	8001134 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3748      	adds	r7, #72	@ 0x48
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000a0 	.word	0x200000a0
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d04:	4b36      	ldr	r3, [pc, #216]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d06:	4a37      	ldr	r2, [pc, #220]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d0c:	225f      	movs	r2, #95	@ 0x5f
 8000d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d2a:	482d      	ldr	r0, [pc, #180]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d2c:	f001 fc32 	bl	8002594 <HAL_TIM_IC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 f93d 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d4a:	f002 fba3 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d54:	f000 f92e 	bl	8000fb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d70:	f001 fe6a 	bl	8002a48 <HAL_TIM_IC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d7a:	f000 f91b 	bl	8000fb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000d8e:	f001 fe5b 	bl	8002a48 <HAL_TIM_IC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d98:	f000 f90c 	bl	8000fb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000dac:	f001 fe4c 	bl	8002a48 <HAL_TIM_IC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000db6:	f000 f8fd 	bl	8000fb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_TIM3_Init+0xf8>)
 8000dca:	f001 fe3d 	bl	8002a48 <HAL_TIM_IC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000dd4:	f000 f8ee 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000e8 	.word	0x200000e8
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <MX_USART2_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e20:	f002 fc0c 	bl	800363c <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f000 f8c3 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000130 	.word	0x20000130
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <MX_GPIO_Init+0xbc>)
 8000eca:	f000 fd8d 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_GPIO_Init+0xbc>)
 8000ee8:	f000 fbfa 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800

08000efc <HAL_TIM_IC_CaptureCallback>:

volatile uint16_t trigger_start_time = 0;
volatile uint16_t wheel_start_time = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    // Check which channel triggered the interrupt
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Trigger channel 1 (rising edge for the trigger on the RC)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f1b      	ldrb	r3, [r3, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10b      	bne.n	8000f24 <HAL_TIM_IC_CaptureCallback+0x28>
    {
        // Capture the start time of the trigger pulse
    	trigger_start_time = HAL_TIM_ReadCapturedValue(htim, pointer_rc->Trigger_Channel1_Rise);
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f001 fef5 	bl	8002d04 <HAL_TIM_ReadCapturedValue>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f20:	801a      	strh	r2, [r3, #0]
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
    {
        // Calculate the duration of the wheel pulse
    	previousWheelValue = HAL_TIM_ReadCapturedValue(htim, pointer_rc->Trigger_Channel2_Fall) - wheel_start_time;
    }
}
 8000f22:	e038      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x9a>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f1b      	ldrb	r3, [r3, #28]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d110      	bne.n	8000f4e <HAL_TIM_IC_CaptureCallback+0x52>
    	previousTriggerValue = HAL_TIM_ReadCapturedValue(htim, pointer_rc->Trigger_Channel1_Fall) - trigger_start_time;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 fee5 	bl	8002d04 <HAL_TIM_ReadCapturedValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f4a:	801a      	strh	r2, [r3, #0]
}
 8000f4c:	e023      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x9a>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7f1b      	ldrb	r3, [r3, #28]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_IC_CaptureCallback+0x72>
    	wheel_start_time = HAL_TIM_ReadCapturedValue(htim, pointer_rc->Trigger_Channel2_Rise);
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f001 fed0 	bl	8002d04 <HAL_TIM_ReadCapturedValue>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f6a:	801a      	strh	r2, [r3, #0]
}
 8000f6c:	e013      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x9a>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7f1b      	ldrb	r3, [r3, #28]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d10f      	bne.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x9a>
    	previousWheelValue = HAL_TIM_ReadCapturedValue(htim, pointer_rc->Trigger_Channel2_Fall) - wheel_start_time;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 fec0 	bl	8002d04 <HAL_TIM_ReadCapturedValue>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f94:	801a      	strh	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000020 	.word	0x20000020
 8000fa4:	2000022c 	.word	0x2000022c
 8000fa8:	20000178 	.word	0x20000178
 8000fac:	2000022e 	.word	0x2000022e
 8000fb0:	2000017a 	.word	0x2000017a

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <Error_Handler+0x8>

08000fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_TIM_PWM_MspInit+0x3c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10d      	bne.n	800103e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2c      	ldr	r2, [pc, #176]	@ (8001124 <HAL_TIM_IC_MspInit+0xd0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d151      	bne.n	800111a <HAL_TIM_IC_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_TIM_IC_MspInit+0xd4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23c0      	movs	r3, #192	@ 0xc0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010da:	2302      	movs	r3, #2
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <HAL_TIM_IC_MspInit+0xd8>)
 80010e6:	f000 fafb 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ea:	2303      	movs	r3, #3
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010fa:	2302      	movs	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480a      	ldr	r0, [pc, #40]	@ (8001130 <HAL_TIM_IC_MspInit+0xdc>)
 8001106:	f000 faeb 	bl	80016e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201d      	movs	r0, #29
 8001110:	f000 faaf 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001114:	201d      	movs	r0, #29
 8001116:	f000 fac8 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000400 	.word	0x40000400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <HAL_TIM_MspPostInit+0x68>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d11e      	bne.n	8001194 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001172:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <HAL_TIM_MspPostInit+0x70>)
 8001190:	f000 faa6 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010000 	.word	0x40010000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <HAL_UART_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_UART_MspInit+0x8c>)
 800121e:	f000 fa5f 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40004400 	.word	0x40004400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f8d1 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM3_IRQHandler+0x10>)
 800129e:	f001 fae3 	bl	8002868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000e8 	.word	0x200000e8

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f002 fde2 	bl	8003ea4 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20020000 	.word	0x20020000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000230 	.word	0x20000230
 8001314:	20000380 	.word	0x20000380

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f002 fda1 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fb07 	bl	8000980 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001380:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 8001384:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001388:	20000380 	.word	0x20000380

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f94f 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdfc 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f967 	bl	80016c6 <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f92f 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	@ (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000024 	.word	0x20000024
 800142c:	2000002c 	.word	0x2000002c
 8001430:	20000028 	.word	0x20000028

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000002c 	.word	0x2000002c
 8001458:	20000234 	.word	0x20000234

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000234 	.word	0x20000234

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000002c 	.word	0x2000002c

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4907      	ldr	r1, [pc, #28]	@ (8001558 <__NVIC_EnableIRQ+0x38>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff29 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff3e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff8e 	bl	80015b0 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5d 	bl	800155c <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff31 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b57      	ldr	r3, [pc, #348]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a56      	ldr	r2, [pc, #344]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a52      	ldr	r2, [pc, #328]	@ (80019cc <HAL_GPIO_Init+0x2ec>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	@ (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	@ (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a47      	ldr	r2, [pc, #284]	@ (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a46      	ldr	r2, [pc, #280]	@ (80019dc <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	@ (80019e0 <HAL_GPIO_Init+0x300>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	@ (80019cc <HAL_GPIO_Init+0x2ec>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a2f      	ldr	r2, [pc, #188]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a24      	ldr	r2, [pc, #144]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e267      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d075      	beq.n	8001b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3a:	4b88      	ldr	r3, [pc, #544]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d00c      	beq.n	8001a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	4b85      	ldr	r3, [pc, #532]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d112      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a52:	4b82      	ldr	r3, [pc, #520]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a5e:	d10b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	4b7e      	ldr	r3, [pc, #504]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d05b      	beq.n	8001b24 <HAL_RCC_OscConfig+0x108>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d157      	bne.n	8001b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e242      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x74>
 8001a82:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01d      	b.n	8001acc <HAL_RCC_OscConfig+0xb0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x98>
 8001a9a:	4b70      	ldr	r3, [pc, #448]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0xb0>
 8001ab4:	4b69      	ldr	r3, [pc, #420]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a68      	ldr	r2, [pc, #416]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fcc2 	bl	800145c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fcbe 	bl	800145c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	@ 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e207      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0xc0>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fcae 	bl	800145c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fcaa 	bl	800145c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1f3      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	4b51      	ldr	r3, [pc, #324]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0xe8>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b32:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x152>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e1c7      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4937      	ldr	r1, [pc, #220]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	e03a      	b.n	8001bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <HAL_RCC_OscConfig+0x244>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fc63 	bl	800145c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fc5f 	bl	800145c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1a8      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	4b2b      	ldr	r3, [pc, #172]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4925      	ldr	r1, [pc, #148]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_RCC_OscConfig+0x244>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc42 	bl	800145c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc3e 	bl	800145c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e187      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d036      	beq.n	8001c74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCC_OscConfig+0x248>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff fc22 	bl	800145c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fc1e 	bl	800145c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e167      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_OscConfig+0x240>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x200>
 8001c3a:	e01b      	b.n	8001c74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_RCC_OscConfig+0x248>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fc0b 	bl	800145c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	e00e      	b.n	8001c68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fc07 	bl	800145c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d907      	bls.n	8001c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e150      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b88      	ldr	r3, [pc, #544]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ea      	bne.n	8001c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8097 	beq.w	8001db0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b81      	ldr	r3, [pc, #516]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b7d      	ldr	r3, [pc, #500]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b77      	ldr	r3, [pc, #476]	@ (8001e90 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b74      	ldr	r3, [pc, #464]	@ (8001e90 <HAL_RCC_OscConfig+0x474>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a73      	ldr	r2, [pc, #460]	@ (8001e90 <HAL_RCC_OscConfig+0x474>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fbc7 	bl	800145c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7ff fbc3 	bl	800145c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e10c      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <HAL_RCC_OscConfig+0x474>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2ea>
 8001cf8:	4b64      	ldr	r3, [pc, #400]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfc:	4a63      	ldr	r2, [pc, #396]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x324>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x30c>
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	4a5e      	ldr	r2, [pc, #376]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x324>
 8001d28:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	4a57      	ldr	r2, [pc, #348]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d34:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a54      	ldr	r2, [pc, #336]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fb88 	bl	800145c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff fb84 	bl	800145c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0cb      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <HAL_RCC_OscConfig+0x334>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fb72 	bl	800145c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fb6e 	bl	800145c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0b5      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	4a38      	ldr	r2, [pc, #224]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a1 	beq.w	8001efc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dba:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d05c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d141      	bne.n	8001e52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <HAL_RCC_OscConfig+0x478>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fb42 	bl	800145c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff fb3e 	bl	800145c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e087      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	491b      	ldr	r1, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x478>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb17 	bl	800145c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fb13 	bl	800145c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e05c      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x416>
 8001e50:	e054      	b.n	8001efc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_RCC_OscConfig+0x478>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb00 	bl	800145c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fafc 	bl	800145c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e045      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_RCC_OscConfig+0x470>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x444>
 8001e7e:	e03d      	b.n	8001efc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e038      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000
 8001e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x4ec>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d028      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d121      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d11a      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d111      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0cc      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b68      	ldr	r3, [pc, #416]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d90c      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b65      	ldr	r3, [pc, #404]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a58      	ldr	r2, [pc, #352]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d044      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d119      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e067      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4934      	ldr	r1, [pc, #208]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff fa2e 	bl	800145c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff fa2a 	bl	800145c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e04f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d20c      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f98e 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	0800480c 	.word	0x0800480c
 80020d0:	20000024 	.word	0x20000024
 80020d4:	20000028 	.word	0x20000028

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020dc:	b090      	sub	sp, #64	@ 0x40
 80020de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020e8:	2300      	movs	r3, #0
 80020ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f0:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d00d      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x40>
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	f200 80a1 	bhi.w	8002244 <HAL_RCC_GetSysClockFreq+0x16c>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x34>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x3a>
 800210a:	e09b      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b53      	ldr	r3, [pc, #332]	@ (800225c <HAL_RCC_GetSysClockFreq+0x184>)
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002110:	e09b      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002112:	4b53      	ldr	r3, [pc, #332]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x188>)
 8002114:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002116:	e098      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002118:	4b4f      	ldr	r3, [pc, #316]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002122:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d028      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	2200      	movs	r2, #0
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	627a      	str	r2, [r7, #36]	@ 0x24
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002140:	2100      	movs	r1, #0
 8002142:	4b47      	ldr	r3, [pc, #284]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x188>)
 8002144:	fb03 f201 	mul.w	r2, r3, r1
 8002148:	2300      	movs	r3, #0
 800214a:	fb00 f303 	mul.w	r3, r0, r3
 800214e:	4413      	add	r3, r2
 8002150:	4a43      	ldr	r2, [pc, #268]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x188>)
 8002152:	fba0 1202 	umull	r1, r2, r0, r2
 8002156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002158:	460a      	mov	r2, r1
 800215a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800215c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800215e:	4413      	add	r3, r2
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002164:	2200      	movs	r2, #0
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	61fa      	str	r2, [r7, #28]
 800216a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002172:	f7fe f88d 	bl	8000290 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4613      	mov	r3, r2
 800217c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800217e:	e053      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002180:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	2200      	movs	r2, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	617a      	str	r2, [r7, #20]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002192:	f04f 0b00 	mov.w	fp, #0
 8002196:	4652      	mov	r2, sl
 8002198:	465b      	mov	r3, fp
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	0159      	lsls	r1, r3, #5
 80021a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a8:	0150      	lsls	r0, r2, #5
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	ebb2 080a 	subs.w	r8, r2, sl
 80021b2:	eb63 090b 	sbc.w	r9, r3, fp
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ca:	ebb2 0408 	subs.w	r4, r2, r8
 80021ce:	eb63 0509 	sbc.w	r5, r3, r9
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	00eb      	lsls	r3, r5, #3
 80021dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e0:	00e2      	lsls	r2, r4, #3
 80021e2:	4614      	mov	r4, r2
 80021e4:	461d      	mov	r5, r3
 80021e6:	eb14 030a 	adds.w	r3, r4, sl
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	eb45 030b 	adc.w	r3, r5, fp
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fe:	4629      	mov	r1, r5
 8002200:	028b      	lsls	r3, r1, #10
 8002202:	4621      	mov	r1, r4
 8002204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002208:	4621      	mov	r1, r4
 800220a:	028a      	lsls	r2, r1, #10
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	2200      	movs	r2, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800221c:	f7fe f838 	bl	8000290 <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002238:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetSysClockFreq+0x184>)
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800224c:	4618      	mov	r0, r3
 800224e:	3740      	adds	r7, #64	@ 0x40
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	017d7840 	.word	0x017d7840

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_RCC_GetHCLKFreq+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000024 	.word	0x20000024

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff0 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	@ (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	0800481c 	.word	0x0800481c

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a8:	f7ff ffdc 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0b5b      	lsrs	r3, r3, #13
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	@ (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	0800481c 	.word	0x0800481c

080022cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e041      	b.n	8002362 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fe8c 	bl	8001010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f000 fd66 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_TIM_PWM_Start+0x24>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e022      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d109      	bne.n	80023aa <HAL_TIM_PWM_Start+0x3e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	e015      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d109      	bne.n	80023c4 <HAL_TIM_PWM_Start+0x58>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e008      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e068      	b.n	80024b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_TIM_PWM_Start+0x82>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023ec:	e013      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_PWM_Start+0x92>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023fc:	e00b      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0xa2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800240c:	e003      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f812 	bl	8003448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <HAL_TIM_PWM_Start+0x14c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d107      	bne.n	800243e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800243c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1d      	ldr	r2, [pc, #116]	@ (80024b8 <HAL_TIM_PWM_Start+0x14c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_TIM_PWM_Start+0x10e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002450:	d013      	beq.n	800247a <HAL_TIM_PWM_Start+0x10e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_TIM_PWM_Start+0x150>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_TIM_PWM_Start+0x10e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <HAL_TIM_PWM_Start+0x154>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_TIM_PWM_Start+0x10e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <HAL_TIM_PWM_Start+0x158>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_TIM_PWM_Start+0x10e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <HAL_TIM_PWM_Start+0x15c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d111      	bne.n	800249e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b06      	cmp	r3, #6
 800248a:	d010      	beq.n	80024ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249c:	e007      	b.n	80024ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40014000 	.word	0x40014000

080024cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 ffb2 	bl	8003448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a29      	ldr	r2, [pc, #164]	@ (8002590 <HAL_TIM_PWM_Stop+0xc4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d117      	bne.n	800251e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_TIM_PWM_Stop+0x52>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	f240 4344 	movw	r3, #1092	@ 0x444
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_TIM_PWM_Stop+0x52>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_TIM_PWM_Stop+0x82>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1a      	ldr	r2, [r3, #32]
 8002534:	f240 4344 	movw	r3, #1092	@ 0x444
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_TIM_PWM_Stop+0x82>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Stop+0x92>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800255c:	e013      	b.n	8002586 <HAL_TIM_PWM_Stop+0xba>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Stop+0xa2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800256c:	e00b      	b.n	8002586 <HAL_TIM_PWM_Stop+0xba>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Stop+0xb2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800257c:	e003      	b.n	8002586 <HAL_TIM_PWM_Stop+0xba>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40010000 	.word	0x40010000

08002594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e041      	b.n	800262a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fd4a 	bl	8001054 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f000 fc02 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <HAL_TIM_IC_Start_IT+0x1e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e013      	b.n	800267a <HAL_TIM_IC_Start_IT+0x46>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d104      	bne.n	8002662 <HAL_TIM_IC_Start_IT+0x2e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e00b      	b.n	800267a <HAL_TIM_IC_Start_IT+0x46>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d104      	bne.n	8002672 <HAL_TIM_IC_Start_IT+0x3e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e003      	b.n	800267a <HAL_TIM_IC_Start_IT+0x46>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <HAL_TIM_IC_Start_IT+0x58>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e013      	b.n	80026b4 <HAL_TIM_IC_Start_IT+0x80>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d104      	bne.n	800269c <HAL_TIM_IC_Start_IT+0x68>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e00b      	b.n	80026b4 <HAL_TIM_IC_Start_IT+0x80>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d104      	bne.n	80026ac <HAL_TIM_IC_Start_IT+0x78>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e003      	b.n	80026b4 <HAL_TIM_IC_Start_IT+0x80>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026b6:	7bbb      	ldrb	r3, [r7, #14]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026bc:	7b7b      	ldrb	r3, [r7, #13]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0c2      	b.n	800284c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_IC_Start_IT+0xa2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d4:	e013      	b.n	80026fe <HAL_TIM_IC_Start_IT+0xca>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_IC_Start_IT+0xb2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e4:	e00b      	b.n	80026fe <HAL_TIM_IC_Start_IT+0xca>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_IC_Start_IT+0xc2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f4:	e003      	b.n	80026fe <HAL_TIM_IC_Start_IT+0xca>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_IT+0xda>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800270c:	e013      	b.n	8002736 <HAL_TIM_IC_Start_IT+0x102>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0xea>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800271c:	e00b      	b.n	8002736 <HAL_TIM_IC_Start_IT+0x102>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xfa>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800272c:	e003      	b.n	8002736 <HAL_TIM_IC_Start_IT+0x102>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d841      	bhi.n	80027c0 <HAL_TIM_IC_Start_IT+0x18c>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <HAL_TIM_IC_Start_IT+0x110>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002779 	.word	0x08002779
 8002748:	080027c1 	.word	0x080027c1
 800274c:	080027c1 	.word	0x080027c1
 8002750:	080027c1 	.word	0x080027c1
 8002754:	0800278b 	.word	0x0800278b
 8002758:	080027c1 	.word	0x080027c1
 800275c:	080027c1 	.word	0x080027c1
 8002760:	080027c1 	.word	0x080027c1
 8002764:	0800279d 	.word	0x0800279d
 8002768:	080027c1 	.word	0x080027c1
 800276c:	080027c1 	.word	0x080027c1
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027af 	.word	0x080027af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0202 	orr.w	r2, r2, #2
 8002786:	60da      	str	r2, [r3, #12]
      break;
 8002788:	e01d      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0204 	orr.w	r2, r2, #4
 8002798:	60da      	str	r2, [r3, #12]
      break;
 800279a:	e014      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	60da      	str	r2, [r3, #12]
      break;
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0210 	orr.w	r2, r2, #16
 80027bc:	60da      	str	r2, [r3, #12]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d13e      	bne.n	800284a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fe37 	bl	8003448 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_TIM_IC_Start_IT+0x220>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0x1e2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ec:	d013      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0x1e2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_TIM_IC_Start_IT+0x224>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0x1e2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_TIM_IC_Start_IT+0x228>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0x1e2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a16      	ldr	r2, [pc, #88]	@ (8002860 <HAL_TIM_IC_Start_IT+0x22c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0x1e2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <HAL_TIM_IC_Start_IT+0x230>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d111      	bne.n	800283a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b06      	cmp	r3, #6
 8002826:	d010      	beq.n	800284a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002838:	e007      	b.n	800284a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40010000 	.word	0x40010000
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800
 8002860:	40000c00 	.word	0x40000c00
 8002864:	40014000 	.word	0x40014000

08002868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d020      	beq.n	80028cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01b      	beq.n	80028cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0202 	mvn.w	r2, #2
 800289c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fb22 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa70 	bl	8002da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa77 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0204 	mvn.w	r2, #4
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fafc 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa4a 	bl	8002da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa51 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d020      	beq.n	8002964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0208 	mvn.w	r2, #8
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2204      	movs	r2, #4
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fad6 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa24 	bl	8002da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fa2b 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2208      	movs	r2, #8
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fab0 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9fe 	bl	8002da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fa05 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0201 	mvn.w	r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9dc 	bl	8002d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fe18 	bl	8003628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9d6 	bl	8002dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0220 	mvn.w	r2, #32
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fdea 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e088      	b.n	8002b78 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a84:	f000 fbc2 	bl	800320c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020c 	bic.w	r2, r2, #12
 8002a96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	619a      	str	r2, [r3, #24]
 8002aaa:	e060      	b.n	8002b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d11c      	bne.n	8002aec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002ac2:	f000 fc0b 	bl	80032dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ad4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6999      	ldr	r1, [r3, #24]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	021a      	lsls	r2, r3, #8
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	e040      	b.n	8002b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b02:	f000 fc28 	bl	8003356 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020c 	bic.w	r2, r2, #12
 8002b14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69d9      	ldr	r1, [r3, #28]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	61da      	str	r2, [r3, #28]
 8002b28:	e021      	b.n	8002b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d11c      	bne.n	8002b6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b40:	f000 fc45 	bl	80033ce <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69d9      	ldr	r1, [r3, #28]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	021a      	lsls	r2, r3, #8
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	61da      	str	r2, [r3, #28]
 8002b68:	e001      	b.n	8002b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0ae      	b.n	8002cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	f200 809f 	bhi.w	8002cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bae:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002ced 	.word	0x08002ced
 8002bbc:	08002ced 	.word	0x08002ced
 8002bc0:	08002ced 	.word	0x08002ced
 8002bc4:	08002c29 	.word	0x08002c29
 8002bc8:	08002ced 	.word	0x08002ced
 8002bcc:	08002ced 	.word	0x08002ced
 8002bd0:	08002ced 	.word	0x08002ced
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002ced 	.word	0x08002ced
 8002bdc:	08002ced 	.word	0x08002ced
 8002be0:	08002ced 	.word	0x08002ced
 8002be4:	08002cab 	.word	0x08002cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f980 	bl	8002ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
      break;
 8002c26:	e064      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f9c6 	bl	8002fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
      break;
 8002c68:	e043      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa11 	bl	8003098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0208 	orr.w	r2, r2, #8
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
      break;
 8002ca8:	e023      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fa5b 	bl	800316c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d831      	bhi.n	8002d7c <HAL_TIM_ReadCapturedValue+0x78>
 8002d18:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d7d 	.word	0x08002d7d
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002d7d 	.word	0x08002d7d
 8002d30:	08002d5f 	.word	0x08002d5f
 8002d34:	08002d7d 	.word	0x08002d7d
 8002d38:	08002d7d 	.word	0x08002d7d
 8002d3c:	08002d7d 	.word	0x08002d7d
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	08002d7d 	.word	0x08002d7d
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002d7d 	.word	0x08002d7d
 8002d50:	08002d73 	.word	0x08002d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	60fb      	str	r3, [r7, #12]

      break;
 8002d5c:	e00f      	b.n	8002d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	60fb      	str	r3, [r7, #12]

      break;
 8002d66:	e00a      	b.n	8002d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	60fb      	str	r3, [r7, #12]

      break;
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	60fb      	str	r3, [r7, #12]

      break;
 8002d7a:	e000      	b.n	8002d7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d7c:	bf00      	nop
  }

  return tmpreg;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3a      	ldr	r2, [pc, #232]	@ (8002ed8 <TIM_Base_SetConfig+0xfc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a37      	ldr	r2, [pc, #220]	@ (8002edc <TIM_Base_SetConfig+0x100>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a36      	ldr	r2, [pc, #216]	@ (8002ee0 <TIM_Base_SetConfig+0x104>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ee4 <TIM_Base_SetConfig+0x108>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <TIM_Base_SetConfig+0xfc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01b      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e34:	d017      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <TIM_Base_SetConfig+0x100>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a27      	ldr	r2, [pc, #156]	@ (8002ee0 <TIM_Base_SetConfig+0x104>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00f      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a26      	ldr	r2, [pc, #152]	@ (8002ee4 <TIM_Base_SetConfig+0x108>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a25      	ldr	r2, [pc, #148]	@ (8002ee8 <TIM_Base_SetConfig+0x10c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a24      	ldr	r2, [pc, #144]	@ (8002eec <TIM_Base_SetConfig+0x110>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a23      	ldr	r2, [pc, #140]	@ (8002ef0 <TIM_Base_SetConfig+0x114>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed8 <TIM_Base_SetConfig+0xfc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f023 0201 	bic.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800

08002ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 0201 	bic.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10c      	bne.n	8002f6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0308 	bic.w	r3, r3, #8
 8002f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a13      	ldr	r2, [pc, #76]	@ (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 0210 	bic.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0320 	bic.w	r3, r3, #32
 800300a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <TIM_OC2_SetConfig+0xd4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10d      	bne.n	800303c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800303a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a15      	ldr	r2, [pc, #84]	@ (8003094 <TIM_OC2_SetConfig+0xd4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d113      	bne.n	800306c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800304a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000

08003098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <TIM_OC3_SetConfig+0xd0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10d      	bne.n	8003112 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <TIM_OC3_SetConfig+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a10      	ldr	r2, [pc, #64]	@ (8003208 <TIM_OC4_SetConfig+0x9c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d109      	bne.n	80031e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000

0800320c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f023 0201 	bic.w	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <TIM_TI1_SetConfig+0xbc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <TIM_TI1_SetConfig+0x56>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003240:	d00f      	beq.n	8003262 <TIM_TI1_SetConfig+0x56>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a21      	ldr	r2, [pc, #132]	@ (80032cc <TIM_TI1_SetConfig+0xc0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_TI1_SetConfig+0x56>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <TIM_TI1_SetConfig+0xc4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <TIM_TI1_SetConfig+0x56>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a1f      	ldr	r2, [pc, #124]	@ (80032d4 <TIM_TI1_SetConfig+0xc8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_TI1_SetConfig+0x56>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <TIM_TI1_SetConfig+0xcc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <TIM_TI1_SetConfig+0x5a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <TIM_TI1_SetConfig+0x5c>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e003      	b.n	8003286 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800328c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	b2db      	uxtb	r3, r3
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f023 030a 	bic.w	r3, r3, #10
 80032a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 030a 	and.w	r3, r3, #10
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40014000 	.word	0x40014000

080032dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 0210 	bic.w	r2, r3, #16
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	b29b      	uxth	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003392:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	b2db      	uxtb	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800340c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	b29b      	uxth	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003420:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2201      	movs	r2, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1a      	ldr	r2, [r3, #32]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e050      	b.n	800354e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d013      	beq.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a16      	ldr	r2, [pc, #88]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a13      	ldr	r2, [pc, #76]	@ (800356c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10c      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4313      	orrs	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40014000 	.word	0x40014000

08003570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003588:	2302      	movs	r3, #2
 800358a:	e03d      	b.n	8003608 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e042      	b.n	80036d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fda0 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800367e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f973 	bl	800396c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d175      	bne.n	80037e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_UART_Transmit+0x2c>
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e06e      	b.n	80037ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2221      	movs	r2, #33	@ 0x21
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fd fe9f 	bl	800145c <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x6c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003750:	e02e      	b.n	80037b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f848 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03a      	b.n	80037ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3302      	adds	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e007      	b.n	80037a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1cb      	bne.n	8003752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f814 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e03b      	b.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d037      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fe26 	bl	800145c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e03a      	b.n	800389c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d020      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d01d      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	d116      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f81d 	bl	80038a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2208      	movs	r2, #8
 800386e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e00f      	b.n	800389c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	429a      	cmp	r2, r3
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	429a      	cmp	r2, r3
 8003898:	d0b4      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b095      	sub	sp, #84	@ 0x54
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	60bb      	str	r3, [r7, #8]
   return(result);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	647b      	str	r3, [r7, #68]	@ 0x44
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393c:	61ba      	str	r2, [r7, #24]
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6979      	ldr	r1, [r7, #20]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	613b      	str	r3, [r7, #16]
   return(result);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800395e:	bf00      	nop
 8003960:	3754      	adds	r7, #84	@ 0x54
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b0c0      	sub	sp, #256	@ 0x100
 8003972:	af00      	add	r7, sp, #0
 8003974:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	ea40 0301 	orr.w	r3, r0, r1
 8003994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039c4:	f021 010c 	bic.w	r1, r1, #12
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	ea40 0301 	orr.w	r3, r0, r1
 80039f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003c38 <UART_SetConfig+0x2cc>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0xa0>
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8d      	ldr	r3, [pc, #564]	@ (8003c3c <UART_SetConfig+0x2d0>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d104      	bne.n	8003a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7fe fc4a 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 8003a10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a14:	e003      	b.n	8003a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7fe fc31 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8003a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a28:	f040 810c 	bne.w	8003c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a46:	415b      	adcs	r3, r3
 8003a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a4e:	4621      	mov	r1, r4
 8003a50:	eb12 0801 	adds.w	r8, r2, r1
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb43 0901 	adc.w	r9, r3, r1
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	eb18 0303 	adds.w	r3, r8, r3
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	eb49 0303 	adc.w	r3, r9, r3
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	18db      	adds	r3, r3, r3
 8003a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	eb42 0303 	adc.w	r3, r2, r3
 8003aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ab0:	f7fc fbee 	bl	8000290 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4b61      	ldr	r3, [pc, #388]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2302 	umull	r2, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	011c      	lsls	r4, r3, #4
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003adc:	415b      	adcs	r3, r3
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb43 0b01 	adc.w	fp, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b04:	4692      	mov	sl, r2
 8003b06:	469b      	mov	fp, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b12:	464b      	mov	r3, r9
 8003b14:	eb4b 0303 	adc.w	r3, fp, r3
 8003b18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b30:	460b      	mov	r3, r1
 8003b32:	18db      	adds	r3, r3, r3
 8003b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b46:	f7fc fba3 	bl	8000290 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003b52:	fba3 2301 	umull	r2, r3, r3, r1
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2264      	movs	r2, #100	@ 0x64
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	1acb      	subs	r3, r1, r3
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b66:	4b36      	ldr	r3, [pc, #216]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003b68:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	1891      	adds	r1, r2, r2
 8003b8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b90:	415b      	adcs	r3, r3
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b98:	4641      	mov	r1, r8
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	414b      	adcs	r3, r1
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	00cb      	lsls	r3, r1, #3
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bba:	4651      	mov	r1, sl
 8003bbc:	00ca      	lsls	r2, r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bcc:	464b      	mov	r3, r9
 8003bce:	460a      	mov	r2, r1
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003be4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bec:	460b      	mov	r3, r1
 8003bee:	18db      	adds	r3, r3, r3
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c02:	f7fc fb45 	bl	8000290 <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	@ 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	3332      	adds	r3, #50	@ 0x32
 8003c1e:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 0207 	and.w	r2, r3, #7
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4422      	add	r2, r4
 8003c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c34:	e106      	b.n	8003e44 <UART_SetConfig+0x4d8>
 8003c36:	bf00      	nop
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	6239      	str	r1, [r7, #32]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c66:	4641      	mov	r1, r8
 8003c68:	1854      	adds	r4, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb43 0501 	adc.w	r5, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	00eb      	lsls	r3, r5, #3
 8003c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	18e3      	adds	r3, r4, r3
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	eb45 0303 	adc.w	r3, r5, r3
 8003c92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	008a      	lsls	r2, r1, #2
 8003cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cc4:	f7fc fae4 	bl	8000290 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b60      	ldr	r3, [pc, #384]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	011c      	lsls	r4, r3, #4
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	61b9      	str	r1, [r7, #24]
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6139      	str	r1, [r7, #16]
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d50:	4649      	mov	r1, r9
 8003d52:	008b      	lsls	r3, r1, #2
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	008a      	lsls	r2, r1, #2
 8003d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d62:	f7fc fa95 	bl	8000290 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4b38      	ldr	r3, [pc, #224]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2264      	movs	r2, #100	@ 0x64
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	1acb      	subs	r3, r1, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	@ 0x32
 8003d80:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d8c:	441c      	add	r4, r3
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	1891      	adds	r1, r2, r2
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	415b      	adcs	r3, r3
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dac:	4641      	mov	r1, r8
 8003dae:	1851      	adds	r1, r2, r1
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	4649      	mov	r1, r9
 8003db4:	414b      	adcs	r3, r1
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	00cb      	lsls	r3, r1, #3
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dce:	4651      	mov	r1, sl
 8003dd0:	00ca      	lsls	r2, r1, #3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4642      	mov	r2, r8
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dde:	464b      	mov	r3, r9
 8003de0:	460a      	mov	r2, r1
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003df2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e00:	4649      	mov	r1, r9
 8003e02:	008b      	lsls	r3, r1, #2
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	008a      	lsls	r2, r1, #2
 8003e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e12:	f7fc fa3d 	bl	8000290 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2164      	movs	r1, #100	@ 0x64
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	3332      	adds	r3, #50	@ 0x32
 8003e2e:	4a08      	ldr	r2, [pc, #32]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4422      	add	r2, r4
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e50:	51eb851f 	.word	0x51eb851f

08003e54 <siprintf>:
 8003e54:	b40e      	push	{r1, r2, r3}
 8003e56:	b500      	push	{lr}
 8003e58:	b09c      	sub	sp, #112	@ 0x70
 8003e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e5c:	9002      	str	r0, [sp, #8]
 8003e5e:	9006      	str	r0, [sp, #24]
 8003e60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e64:	4809      	ldr	r0, [pc, #36]	@ (8003e8c <siprintf+0x38>)
 8003e66:	9107      	str	r1, [sp, #28]
 8003e68:	9104      	str	r1, [sp, #16]
 8003e6a:	4909      	ldr	r1, [pc, #36]	@ (8003e90 <siprintf+0x3c>)
 8003e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	6800      	ldr	r0, [r0, #0]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	a902      	add	r1, sp, #8
 8003e78:	f000 f994 	bl	80041a4 <_svfiprintf_r>
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	b01c      	add	sp, #112	@ 0x70
 8003e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e88:	b003      	add	sp, #12
 8003e8a:	4770      	bx	lr
 8003e8c:	20000030 	.word	0x20000030
 8003e90:	ffff0208 	.word	0xffff0208

08003e94 <memset>:
 8003e94:	4402      	add	r2, r0
 8003e96:	4603      	mov	r3, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	@ (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000030 	.word	0x20000030

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2600      	movs	r6, #0
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f000 fc66 	bl	8004794 <_init>
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2600      	movs	r6, #0
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08004860 	.word	0x08004860
 8003eec:	08004860 	.word	0x08004860
 8003ef0:	08004860 	.word	0x08004860
 8003ef4:	08004864 	.word	0x08004864

08003ef8 <__retarget_lock_acquire_recursive>:
 8003ef8:	4770      	bx	lr

08003efa <__retarget_lock_release_recursive>:
 8003efa:	4770      	bx	lr

08003efc <_free_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4605      	mov	r5, r0
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d041      	beq.n	8003f88 <_free_r+0x8c>
 8003f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f08:	1f0c      	subs	r4, r1, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfb8      	it	lt
 8003f0e:	18e4      	addlt	r4, r4, r3
 8003f10:	f000 f8e0 	bl	80040d4 <__malloc_lock>
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <_free_r+0x90>)
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	b933      	cbnz	r3, 8003f28 <_free_r+0x2c>
 8003f1a:	6063      	str	r3, [r4, #4]
 8003f1c:	6014      	str	r4, [r2, #0]
 8003f1e:	4628      	mov	r0, r5
 8003f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f24:	f000 b8dc 	b.w	80040e0 <__malloc_unlock>
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d908      	bls.n	8003f3e <_free_r+0x42>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	1821      	adds	r1, r4, r0
 8003f30:	428b      	cmp	r3, r1
 8003f32:	bf01      	itttt	eq
 8003f34:	6819      	ldreq	r1, [r3, #0]
 8003f36:	685b      	ldreq	r3, [r3, #4]
 8003f38:	1809      	addeq	r1, r1, r0
 8003f3a:	6021      	streq	r1, [r4, #0]
 8003f3c:	e7ed      	b.n	8003f1a <_free_r+0x1e>
 8003f3e:	461a      	mov	r2, r3
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b10b      	cbz	r3, 8003f48 <_free_r+0x4c>
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d9fa      	bls.n	8003f3e <_free_r+0x42>
 8003f48:	6811      	ldr	r1, [r2, #0]
 8003f4a:	1850      	adds	r0, r2, r1
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d10b      	bne.n	8003f68 <_free_r+0x6c>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	4401      	add	r1, r0
 8003f54:	1850      	adds	r0, r2, r1
 8003f56:	4283      	cmp	r3, r0
 8003f58:	6011      	str	r1, [r2, #0]
 8003f5a:	d1e0      	bne.n	8003f1e <_free_r+0x22>
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	6053      	str	r3, [r2, #4]
 8003f62:	4408      	add	r0, r1
 8003f64:	6010      	str	r0, [r2, #0]
 8003f66:	e7da      	b.n	8003f1e <_free_r+0x22>
 8003f68:	d902      	bls.n	8003f70 <_free_r+0x74>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	e7d6      	b.n	8003f1e <_free_r+0x22>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	1821      	adds	r1, r4, r0
 8003f74:	428b      	cmp	r3, r1
 8003f76:	bf04      	itt	eq
 8003f78:	6819      	ldreq	r1, [r3, #0]
 8003f7a:	685b      	ldreq	r3, [r3, #4]
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	bf04      	itt	eq
 8003f80:	1809      	addeq	r1, r1, r0
 8003f82:	6021      	streq	r1, [r4, #0]
 8003f84:	6054      	str	r4, [r2, #4]
 8003f86:	e7ca      	b.n	8003f1e <_free_r+0x22>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000037c 	.word	0x2000037c

08003f90 <sbrk_aligned>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd0 <sbrk_aligned+0x40>)
 8003f94:	460c      	mov	r4, r1
 8003f96:	6831      	ldr	r1, [r6, #0]
 8003f98:	4605      	mov	r5, r0
 8003f9a:	b911      	cbnz	r1, 8003fa2 <sbrk_aligned+0x12>
 8003f9c:	f000 fba6 	bl	80046ec <_sbrk_r>
 8003fa0:	6030      	str	r0, [r6, #0]
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 fba1 	bl	80046ec <_sbrk_r>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	d103      	bne.n	8003fb6 <sbrk_aligned+0x26>
 8003fae:	f04f 34ff 	mov.w	r4, #4294967295
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	1cc4      	adds	r4, r0, #3
 8003fb8:	f024 0403 	bic.w	r4, r4, #3
 8003fbc:	42a0      	cmp	r0, r4
 8003fbe:	d0f8      	beq.n	8003fb2 <sbrk_aligned+0x22>
 8003fc0:	1a21      	subs	r1, r4, r0
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 fb92 	bl	80046ec <_sbrk_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d1f2      	bne.n	8003fb2 <sbrk_aligned+0x22>
 8003fcc:	e7ef      	b.n	8003fae <sbrk_aligned+0x1e>
 8003fce:	bf00      	nop
 8003fd0:	20000378 	.word	0x20000378

08003fd4 <_malloc_r>:
 8003fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	1ccd      	adds	r5, r1, #3
 8003fda:	f025 0503 	bic.w	r5, r5, #3
 8003fde:	3508      	adds	r5, #8
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	bf38      	it	cc
 8003fe4:	250c      	movcc	r5, #12
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	4606      	mov	r6, r0
 8003fea:	db01      	blt.n	8003ff0 <_malloc_r+0x1c>
 8003fec:	42a9      	cmp	r1, r5
 8003fee:	d904      	bls.n	8003ffa <_malloc_r+0x26>
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	6033      	str	r3, [r6, #0]
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d0 <_malloc_r+0xfc>
 8003ffe:	f000 f869 	bl	80040d4 <__malloc_lock>
 8004002:	f8d8 3000 	ldr.w	r3, [r8]
 8004006:	461c      	mov	r4, r3
 8004008:	bb44      	cbnz	r4, 800405c <_malloc_r+0x88>
 800400a:	4629      	mov	r1, r5
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff ffbf 	bl	8003f90 <sbrk_aligned>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	4604      	mov	r4, r0
 8004016:	d158      	bne.n	80040ca <_malloc_r+0xf6>
 8004018:	f8d8 4000 	ldr.w	r4, [r8]
 800401c:	4627      	mov	r7, r4
 800401e:	2f00      	cmp	r7, #0
 8004020:	d143      	bne.n	80040aa <_malloc_r+0xd6>
 8004022:	2c00      	cmp	r4, #0
 8004024:	d04b      	beq.n	80040be <_malloc_r+0xea>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	4639      	mov	r1, r7
 800402a:	4630      	mov	r0, r6
 800402c:	eb04 0903 	add.w	r9, r4, r3
 8004030:	f000 fb5c 	bl	80046ec <_sbrk_r>
 8004034:	4581      	cmp	r9, r0
 8004036:	d142      	bne.n	80040be <_malloc_r+0xea>
 8004038:	6821      	ldr	r1, [r4, #0]
 800403a:	1a6d      	subs	r5, r5, r1
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff ffa6 	bl	8003f90 <sbrk_aligned>
 8004044:	3001      	adds	r0, #1
 8004046:	d03a      	beq.n	80040be <_malloc_r+0xea>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	442b      	add	r3, r5
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	f8d8 3000 	ldr.w	r3, [r8]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	bb62      	cbnz	r2, 80040b0 <_malloc_r+0xdc>
 8004056:	f8c8 7000 	str.w	r7, [r8]
 800405a:	e00f      	b.n	800407c <_malloc_r+0xa8>
 800405c:	6822      	ldr	r2, [r4, #0]
 800405e:	1b52      	subs	r2, r2, r5
 8004060:	d420      	bmi.n	80040a4 <_malloc_r+0xd0>
 8004062:	2a0b      	cmp	r2, #11
 8004064:	d917      	bls.n	8004096 <_malloc_r+0xc2>
 8004066:	1961      	adds	r1, r4, r5
 8004068:	42a3      	cmp	r3, r4
 800406a:	6025      	str	r5, [r4, #0]
 800406c:	bf18      	it	ne
 800406e:	6059      	strne	r1, [r3, #4]
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	bf08      	it	eq
 8004074:	f8c8 1000 	streq.w	r1, [r8]
 8004078:	5162      	str	r2, [r4, r5]
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	4630      	mov	r0, r6
 800407e:	f000 f82f 	bl	80040e0 <__malloc_unlock>
 8004082:	f104 000b 	add.w	r0, r4, #11
 8004086:	1d23      	adds	r3, r4, #4
 8004088:	f020 0007 	bic.w	r0, r0, #7
 800408c:	1ac2      	subs	r2, r0, r3
 800408e:	bf1c      	itt	ne
 8004090:	1a1b      	subne	r3, r3, r0
 8004092:	50a3      	strne	r3, [r4, r2]
 8004094:	e7af      	b.n	8003ff6 <_malloc_r+0x22>
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	42a3      	cmp	r3, r4
 800409a:	bf0c      	ite	eq
 800409c:	f8c8 2000 	streq.w	r2, [r8]
 80040a0:	605a      	strne	r2, [r3, #4]
 80040a2:	e7eb      	b.n	800407c <_malloc_r+0xa8>
 80040a4:	4623      	mov	r3, r4
 80040a6:	6864      	ldr	r4, [r4, #4]
 80040a8:	e7ae      	b.n	8004008 <_malloc_r+0x34>
 80040aa:	463c      	mov	r4, r7
 80040ac:	687f      	ldr	r7, [r7, #4]
 80040ae:	e7b6      	b.n	800401e <_malloc_r+0x4a>
 80040b0:	461a      	mov	r2, r3
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d1fb      	bne.n	80040b0 <_malloc_r+0xdc>
 80040b8:	2300      	movs	r3, #0
 80040ba:	6053      	str	r3, [r2, #4]
 80040bc:	e7de      	b.n	800407c <_malloc_r+0xa8>
 80040be:	230c      	movs	r3, #12
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 f80c 	bl	80040e0 <__malloc_unlock>
 80040c8:	e794      	b.n	8003ff4 <_malloc_r+0x20>
 80040ca:	6005      	str	r5, [r0, #0]
 80040cc:	e7d6      	b.n	800407c <_malloc_r+0xa8>
 80040ce:	bf00      	nop
 80040d0:	2000037c 	.word	0x2000037c

080040d4 <__malloc_lock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	@ (80040dc <__malloc_lock+0x8>)
 80040d6:	f7ff bf0f 	b.w	8003ef8 <__retarget_lock_acquire_recursive>
 80040da:	bf00      	nop
 80040dc:	20000374 	.word	0x20000374

080040e0 <__malloc_unlock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	@ (80040e8 <__malloc_unlock+0x8>)
 80040e2:	f7ff bf0a 	b.w	8003efa <__retarget_lock_release_recursive>
 80040e6:	bf00      	nop
 80040e8:	20000374 	.word	0x20000374

080040ec <__ssputs_r>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	688e      	ldr	r6, [r1, #8]
 80040f2:	461f      	mov	r7, r3
 80040f4:	42be      	cmp	r6, r7
 80040f6:	680b      	ldr	r3, [r1, #0]
 80040f8:	4682      	mov	sl, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4690      	mov	r8, r2
 80040fe:	d82d      	bhi.n	800415c <__ssputs_r+0x70>
 8004100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004108:	d026      	beq.n	8004158 <__ssputs_r+0x6c>
 800410a:	6965      	ldr	r5, [r4, #20]
 800410c:	6909      	ldr	r1, [r1, #16]
 800410e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004112:	eba3 0901 	sub.w	r9, r3, r1
 8004116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800411a:	1c7b      	adds	r3, r7, #1
 800411c:	444b      	add	r3, r9
 800411e:	106d      	asrs	r5, r5, #1
 8004120:	429d      	cmp	r5, r3
 8004122:	bf38      	it	cc
 8004124:	461d      	movcc	r5, r3
 8004126:	0553      	lsls	r3, r2, #21
 8004128:	d527      	bpl.n	800417a <__ssputs_r+0x8e>
 800412a:	4629      	mov	r1, r5
 800412c:	f7ff ff52 	bl	8003fd4 <_malloc_r>
 8004130:	4606      	mov	r6, r0
 8004132:	b360      	cbz	r0, 800418e <__ssputs_r+0xa2>
 8004134:	6921      	ldr	r1, [r4, #16]
 8004136:	464a      	mov	r2, r9
 8004138:	f000 fae8 	bl	800470c <memcpy>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	6126      	str	r6, [r4, #16]
 800414a:	6165      	str	r5, [r4, #20]
 800414c:	444e      	add	r6, r9
 800414e:	eba5 0509 	sub.w	r5, r5, r9
 8004152:	6026      	str	r6, [r4, #0]
 8004154:	60a5      	str	r5, [r4, #8]
 8004156:	463e      	mov	r6, r7
 8004158:	42be      	cmp	r6, r7
 800415a:	d900      	bls.n	800415e <__ssputs_r+0x72>
 800415c:	463e      	mov	r6, r7
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	4632      	mov	r2, r6
 8004162:	4641      	mov	r1, r8
 8004164:	f000 faa8 	bl	80046b8 <memmove>
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	1b9b      	subs	r3, r3, r6
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	4433      	add	r3, r6
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2000      	movs	r0, #0
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417a:	462a      	mov	r2, r5
 800417c:	f000 fad4 	bl	8004728 <_realloc_r>
 8004180:	4606      	mov	r6, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d1e0      	bne.n	8004148 <__ssputs_r+0x5c>
 8004186:	6921      	ldr	r1, [r4, #16]
 8004188:	4650      	mov	r0, sl
 800418a:	f7ff feb7 	bl	8003efc <_free_r>
 800418e:	230c      	movs	r3, #12
 8004190:	f8ca 3000 	str.w	r3, [sl]
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e7e9      	b.n	8004176 <__ssputs_r+0x8a>
	...

080041a4 <_svfiprintf_r>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	4698      	mov	r8, r3
 80041aa:	898b      	ldrh	r3, [r1, #12]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	b09d      	sub	sp, #116	@ 0x74
 80041b0:	4607      	mov	r7, r0
 80041b2:	460d      	mov	r5, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	d510      	bpl.n	80041da <_svfiprintf_r+0x36>
 80041b8:	690b      	ldr	r3, [r1, #16]
 80041ba:	b973      	cbnz	r3, 80041da <_svfiprintf_r+0x36>
 80041bc:	2140      	movs	r1, #64	@ 0x40
 80041be:	f7ff ff09 	bl	8003fd4 <_malloc_r>
 80041c2:	6028      	str	r0, [r5, #0]
 80041c4:	6128      	str	r0, [r5, #16]
 80041c6:	b930      	cbnz	r0, 80041d6 <_svfiprintf_r+0x32>
 80041c8:	230c      	movs	r3, #12
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	b01d      	add	sp, #116	@ 0x74
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	2340      	movs	r3, #64	@ 0x40
 80041d8:	616b      	str	r3, [r5, #20]
 80041da:	2300      	movs	r3, #0
 80041dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041de:	2320      	movs	r3, #32
 80041e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e8:	2330      	movs	r3, #48	@ 0x30
 80041ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004388 <_svfiprintf_r+0x1e4>
 80041ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041f2:	f04f 0901 	mov.w	r9, #1
 80041f6:	4623      	mov	r3, r4
 80041f8:	469a      	mov	sl, r3
 80041fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041fe:	b10a      	cbz	r2, 8004204 <_svfiprintf_r+0x60>
 8004200:	2a25      	cmp	r2, #37	@ 0x25
 8004202:	d1f9      	bne.n	80041f8 <_svfiprintf_r+0x54>
 8004204:	ebba 0b04 	subs.w	fp, sl, r4
 8004208:	d00b      	beq.n	8004222 <_svfiprintf_r+0x7e>
 800420a:	465b      	mov	r3, fp
 800420c:	4622      	mov	r2, r4
 800420e:	4629      	mov	r1, r5
 8004210:	4638      	mov	r0, r7
 8004212:	f7ff ff6b 	bl	80040ec <__ssputs_r>
 8004216:	3001      	adds	r0, #1
 8004218:	f000 80a7 	beq.w	800436a <_svfiprintf_r+0x1c6>
 800421c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800421e:	445a      	add	r2, fp
 8004220:	9209      	str	r2, [sp, #36]	@ 0x24
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 809f 	beq.w	800436a <_svfiprintf_r+0x1c6>
 800422c:	2300      	movs	r3, #0
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004236:	f10a 0a01 	add.w	sl, sl, #1
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	9307      	str	r3, [sp, #28]
 800423e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004242:	931a      	str	r3, [sp, #104]	@ 0x68
 8004244:	4654      	mov	r4, sl
 8004246:	2205      	movs	r2, #5
 8004248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424c:	484e      	ldr	r0, [pc, #312]	@ (8004388 <_svfiprintf_r+0x1e4>)
 800424e:	f7fb ffcf 	bl	80001f0 <memchr>
 8004252:	9a04      	ldr	r2, [sp, #16]
 8004254:	b9d8      	cbnz	r0, 800428e <_svfiprintf_r+0xea>
 8004256:	06d0      	lsls	r0, r2, #27
 8004258:	bf44      	itt	mi
 800425a:	2320      	movmi	r3, #32
 800425c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004260:	0711      	lsls	r1, r2, #28
 8004262:	bf44      	itt	mi
 8004264:	232b      	movmi	r3, #43	@ 0x2b
 8004266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800426a:	f89a 3000 	ldrb.w	r3, [sl]
 800426e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004270:	d015      	beq.n	800429e <_svfiprintf_r+0xfa>
 8004272:	9a07      	ldr	r2, [sp, #28]
 8004274:	4654      	mov	r4, sl
 8004276:	2000      	movs	r0, #0
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	4621      	mov	r1, r4
 800427e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004282:	3b30      	subs	r3, #48	@ 0x30
 8004284:	2b09      	cmp	r3, #9
 8004286:	d94b      	bls.n	8004320 <_svfiprintf_r+0x17c>
 8004288:	b1b0      	cbz	r0, 80042b8 <_svfiprintf_r+0x114>
 800428a:	9207      	str	r2, [sp, #28]
 800428c:	e014      	b.n	80042b8 <_svfiprintf_r+0x114>
 800428e:	eba0 0308 	sub.w	r3, r0, r8
 8004292:	fa09 f303 	lsl.w	r3, r9, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	9304      	str	r3, [sp, #16]
 800429a:	46a2      	mov	sl, r4
 800429c:	e7d2      	b.n	8004244 <_svfiprintf_r+0xa0>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	1d19      	adds	r1, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9103      	str	r1, [sp, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfbb      	ittet	lt
 80042aa:	425b      	neglt	r3, r3
 80042ac:	f042 0202 	orrlt.w	r2, r2, #2
 80042b0:	9307      	strge	r3, [sp, #28]
 80042b2:	9307      	strlt	r3, [sp, #28]
 80042b4:	bfb8      	it	lt
 80042b6:	9204      	strlt	r2, [sp, #16]
 80042b8:	7823      	ldrb	r3, [r4, #0]
 80042ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80042bc:	d10a      	bne.n	80042d4 <_svfiprintf_r+0x130>
 80042be:	7863      	ldrb	r3, [r4, #1]
 80042c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042c2:	d132      	bne.n	800432a <_svfiprintf_r+0x186>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	9203      	str	r2, [sp, #12]
 80042cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042d0:	3402      	adds	r4, #2
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004398 <_svfiprintf_r+0x1f4>
 80042d8:	7821      	ldrb	r1, [r4, #0]
 80042da:	2203      	movs	r2, #3
 80042dc:	4650      	mov	r0, sl
 80042de:	f7fb ff87 	bl	80001f0 <memchr>
 80042e2:	b138      	cbz	r0, 80042f4 <_svfiprintf_r+0x150>
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	eba0 000a 	sub.w	r0, r0, sl
 80042ea:	2240      	movs	r2, #64	@ 0x40
 80042ec:	4082      	lsls	r2, r0
 80042ee:	4313      	orrs	r3, r2
 80042f0:	3401      	adds	r4, #1
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f8:	4824      	ldr	r0, [pc, #144]	@ (800438c <_svfiprintf_r+0x1e8>)
 80042fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042fe:	2206      	movs	r2, #6
 8004300:	f7fb ff76 	bl	80001f0 <memchr>
 8004304:	2800      	cmp	r0, #0
 8004306:	d036      	beq.n	8004376 <_svfiprintf_r+0x1d2>
 8004308:	4b21      	ldr	r3, [pc, #132]	@ (8004390 <_svfiprintf_r+0x1ec>)
 800430a:	bb1b      	cbnz	r3, 8004354 <_svfiprintf_r+0x1b0>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	3307      	adds	r3, #7
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	3308      	adds	r3, #8
 8004316:	9303      	str	r3, [sp, #12]
 8004318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800431a:	4433      	add	r3, r6
 800431c:	9309      	str	r3, [sp, #36]	@ 0x24
 800431e:	e76a      	b.n	80041f6 <_svfiprintf_r+0x52>
 8004320:	fb0c 3202 	mla	r2, ip, r2, r3
 8004324:	460c      	mov	r4, r1
 8004326:	2001      	movs	r0, #1
 8004328:	e7a8      	b.n	800427c <_svfiprintf_r+0xd8>
 800432a:	2300      	movs	r3, #0
 800432c:	3401      	adds	r4, #1
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	4619      	mov	r1, r3
 8004332:	f04f 0c0a 	mov.w	ip, #10
 8004336:	4620      	mov	r0, r4
 8004338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800433c:	3a30      	subs	r2, #48	@ 0x30
 800433e:	2a09      	cmp	r2, #9
 8004340:	d903      	bls.n	800434a <_svfiprintf_r+0x1a6>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0c6      	beq.n	80042d4 <_svfiprintf_r+0x130>
 8004346:	9105      	str	r1, [sp, #20]
 8004348:	e7c4      	b.n	80042d4 <_svfiprintf_r+0x130>
 800434a:	fb0c 2101 	mla	r1, ip, r1, r2
 800434e:	4604      	mov	r4, r0
 8004350:	2301      	movs	r3, #1
 8004352:	e7f0      	b.n	8004336 <_svfiprintf_r+0x192>
 8004354:	ab03      	add	r3, sp, #12
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	462a      	mov	r2, r5
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <_svfiprintf_r+0x1f0>)
 800435c:	a904      	add	r1, sp, #16
 800435e:	4638      	mov	r0, r7
 8004360:	f3af 8000 	nop.w
 8004364:	1c42      	adds	r2, r0, #1
 8004366:	4606      	mov	r6, r0
 8004368:	d1d6      	bne.n	8004318 <_svfiprintf_r+0x174>
 800436a:	89ab      	ldrh	r3, [r5, #12]
 800436c:	065b      	lsls	r3, r3, #25
 800436e:	f53f af2d 	bmi.w	80041cc <_svfiprintf_r+0x28>
 8004372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004374:	e72c      	b.n	80041d0 <_svfiprintf_r+0x2c>
 8004376:	ab03      	add	r3, sp, #12
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	462a      	mov	r2, r5
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <_svfiprintf_r+0x1f0>)
 800437e:	a904      	add	r1, sp, #16
 8004380:	4638      	mov	r0, r7
 8004382:	f000 f879 	bl	8004478 <_printf_i>
 8004386:	e7ed      	b.n	8004364 <_svfiprintf_r+0x1c0>
 8004388:	08004824 	.word	0x08004824
 800438c:	0800482e 	.word	0x0800482e
 8004390:	00000000 	.word	0x00000000
 8004394:	080040ed 	.word	0x080040ed
 8004398:	0800482a 	.word	0x0800482a

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4698      	mov	r8, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bfb8      	it	lt
 80043b0:	4613      	movlt	r3, r2
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b8:	4607      	mov	r7, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc26      	bgt.n	8004432 <_printf_common+0x96>
 80043e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	3b00      	subs	r3, #0
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d42b      	bmi.n	800444c <_printf_common+0xb0>
 80043f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043f8:	4641      	mov	r1, r8
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c8      	blx	r9
 80043fe:	3001      	adds	r0, #1
 8004400:	d01e      	beq.n	8004440 <_printf_common+0xa4>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf02      	ittt	eq
 800440e:	68e5      	ldreq	r5, [r4, #12]
 8004410:	6833      	ldreq	r3, [r6, #0]
 8004412:	1aed      	subeq	r5, r5, r3
 8004414:	68a3      	ldr	r3, [r4, #8]
 8004416:	bf0c      	ite	eq
 8004418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800441c:	2500      	movne	r5, #0
 800441e:	4293      	cmp	r3, r2
 8004420:	bfc4      	itt	gt
 8004422:	1a9b      	subgt	r3, r3, r2
 8004424:	18ed      	addgt	r5, r5, r3
 8004426:	2600      	movs	r6, #0
 8004428:	341a      	adds	r4, #26
 800442a:	42b5      	cmp	r5, r6
 800442c:	d11a      	bne.n	8004464 <_printf_common+0xc8>
 800442e:	2000      	movs	r0, #0
 8004430:	e008      	b.n	8004444 <_printf_common+0xa8>
 8004432:	2301      	movs	r3, #1
 8004434:	4652      	mov	r2, sl
 8004436:	4641      	mov	r1, r8
 8004438:	4638      	mov	r0, r7
 800443a:	47c8      	blx	r9
 800443c:	3001      	adds	r0, #1
 800443e:	d103      	bne.n	8004448 <_printf_common+0xac>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004448:	3501      	adds	r5, #1
 800444a:	e7c6      	b.n	80043da <_printf_common+0x3e>
 800444c:	18e1      	adds	r1, r4, r3
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	2030      	movs	r0, #48	@ 0x30
 8004452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004456:	4422      	add	r2, r4
 8004458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800445c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004460:	3302      	adds	r3, #2
 8004462:	e7c7      	b.n	80043f4 <_printf_common+0x58>
 8004464:	2301      	movs	r3, #1
 8004466:	4622      	mov	r2, r4
 8004468:	4641      	mov	r1, r8
 800446a:	4638      	mov	r0, r7
 800446c:	47c8      	blx	r9
 800446e:	3001      	adds	r0, #1
 8004470:	d0e6      	beq.n	8004440 <_printf_common+0xa4>
 8004472:	3601      	adds	r6, #1
 8004474:	e7d9      	b.n	800442a <_printf_common+0x8e>
	...

08004478 <_printf_i>:
 8004478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	7e0f      	ldrb	r7, [r1, #24]
 800447e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004480:	2f78      	cmp	r7, #120	@ 0x78
 8004482:	4691      	mov	r9, r2
 8004484:	4680      	mov	r8, r0
 8004486:	460c      	mov	r4, r1
 8004488:	469a      	mov	sl, r3
 800448a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800448e:	d807      	bhi.n	80044a0 <_printf_i+0x28>
 8004490:	2f62      	cmp	r7, #98	@ 0x62
 8004492:	d80a      	bhi.n	80044aa <_printf_i+0x32>
 8004494:	2f00      	cmp	r7, #0
 8004496:	f000 80d2 	beq.w	800463e <_printf_i+0x1c6>
 800449a:	2f58      	cmp	r7, #88	@ 0x58
 800449c:	f000 80b9 	beq.w	8004612 <_printf_i+0x19a>
 80044a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044a8:	e03a      	b.n	8004520 <_printf_i+0xa8>
 80044aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044ae:	2b15      	cmp	r3, #21
 80044b0:	d8f6      	bhi.n	80044a0 <_printf_i+0x28>
 80044b2:	a101      	add	r1, pc, #4	@ (adr r1, 80044b8 <_printf_i+0x40>)
 80044b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004525 	.word	0x08004525
 80044c0:	080044a1 	.word	0x080044a1
 80044c4:	080044a1 	.word	0x080044a1
 80044c8:	080044a1 	.word	0x080044a1
 80044cc:	080044a1 	.word	0x080044a1
 80044d0:	08004525 	.word	0x08004525
 80044d4:	080044a1 	.word	0x080044a1
 80044d8:	080044a1 	.word	0x080044a1
 80044dc:	080044a1 	.word	0x080044a1
 80044e0:	080044a1 	.word	0x080044a1
 80044e4:	08004625 	.word	0x08004625
 80044e8:	0800454f 	.word	0x0800454f
 80044ec:	080045df 	.word	0x080045df
 80044f0:	080044a1 	.word	0x080044a1
 80044f4:	080044a1 	.word	0x080044a1
 80044f8:	08004647 	.word	0x08004647
 80044fc:	080044a1 	.word	0x080044a1
 8004500:	0800454f 	.word	0x0800454f
 8004504:	080044a1 	.word	0x080044a1
 8004508:	080044a1 	.word	0x080044a1
 800450c:	080045e7 	.word	0x080045e7
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6032      	str	r2, [r6, #0]
 8004518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800451c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004520:	2301      	movs	r3, #1
 8004522:	e09d      	b.n	8004660 <_printf_i+0x1e8>
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	6031      	str	r1, [r6, #0]
 800452c:	0606      	lsls	r6, r0, #24
 800452e:	d501      	bpl.n	8004534 <_printf_i+0xbc>
 8004530:	681d      	ldr	r5, [r3, #0]
 8004532:	e003      	b.n	800453c <_printf_i+0xc4>
 8004534:	0645      	lsls	r5, r0, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0xb8>
 8004538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800453c:	2d00      	cmp	r5, #0
 800453e:	da03      	bge.n	8004548 <_printf_i+0xd0>
 8004540:	232d      	movs	r3, #45	@ 0x2d
 8004542:	426d      	negs	r5, r5
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004548:	4859      	ldr	r0, [pc, #356]	@ (80046b0 <_printf_i+0x238>)
 800454a:	230a      	movs	r3, #10
 800454c:	e011      	b.n	8004572 <_printf_i+0xfa>
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	0608      	lsls	r0, r1, #24
 8004554:	f853 5b04 	ldr.w	r5, [r3], #4
 8004558:	d402      	bmi.n	8004560 <_printf_i+0xe8>
 800455a:	0649      	lsls	r1, r1, #25
 800455c:	bf48      	it	mi
 800455e:	b2ad      	uxthmi	r5, r5
 8004560:	2f6f      	cmp	r7, #111	@ 0x6f
 8004562:	4853      	ldr	r0, [pc, #332]	@ (80046b0 <_printf_i+0x238>)
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	bf14      	ite	ne
 8004568:	230a      	movne	r3, #10
 800456a:	2308      	moveq	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004572:	6866      	ldr	r6, [r4, #4]
 8004574:	60a6      	str	r6, [r4, #8]
 8004576:	2e00      	cmp	r6, #0
 8004578:	bfa2      	ittt	ge
 800457a:	6821      	ldrge	r1, [r4, #0]
 800457c:	f021 0104 	bicge.w	r1, r1, #4
 8004580:	6021      	strge	r1, [r4, #0]
 8004582:	b90d      	cbnz	r5, 8004588 <_printf_i+0x110>
 8004584:	2e00      	cmp	r6, #0
 8004586:	d04b      	beq.n	8004620 <_printf_i+0x1a8>
 8004588:	4616      	mov	r6, r2
 800458a:	fbb5 f1f3 	udiv	r1, r5, r3
 800458e:	fb03 5711 	mls	r7, r3, r1, r5
 8004592:	5dc7      	ldrb	r7, [r0, r7]
 8004594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004598:	462f      	mov	r7, r5
 800459a:	42bb      	cmp	r3, r7
 800459c:	460d      	mov	r5, r1
 800459e:	d9f4      	bls.n	800458a <_printf_i+0x112>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d10b      	bne.n	80045bc <_printf_i+0x144>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	07df      	lsls	r7, r3, #31
 80045a8:	d508      	bpl.n	80045bc <_printf_i+0x144>
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6861      	ldr	r1, [r4, #4]
 80045ae:	4299      	cmp	r1, r3
 80045b0:	bfde      	ittt	le
 80045b2:	2330      	movle	r3, #48	@ 0x30
 80045b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045bc:	1b92      	subs	r2, r2, r6
 80045be:	6122      	str	r2, [r4, #16]
 80045c0:	f8cd a000 	str.w	sl, [sp]
 80045c4:	464b      	mov	r3, r9
 80045c6:	aa03      	add	r2, sp, #12
 80045c8:	4621      	mov	r1, r4
 80045ca:	4640      	mov	r0, r8
 80045cc:	f7ff fee6 	bl	800439c <_printf_common>
 80045d0:	3001      	adds	r0, #1
 80045d2:	d14a      	bne.n	800466a <_printf_i+0x1f2>
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	b004      	add	sp, #16
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	4833      	ldr	r0, [pc, #204]	@ (80046b4 <_printf_i+0x23c>)
 80045e8:	2778      	movs	r7, #120	@ 0x78
 80045ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	6831      	ldr	r1, [r6, #0]
 80045f2:	061f      	lsls	r7, r3, #24
 80045f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80045f8:	d402      	bmi.n	8004600 <_printf_i+0x188>
 80045fa:	065f      	lsls	r7, r3, #25
 80045fc:	bf48      	it	mi
 80045fe:	b2ad      	uxthmi	r5, r5
 8004600:	6031      	str	r1, [r6, #0]
 8004602:	07d9      	lsls	r1, r3, #31
 8004604:	bf44      	itt	mi
 8004606:	f043 0320 	orrmi.w	r3, r3, #32
 800460a:	6023      	strmi	r3, [r4, #0]
 800460c:	b11d      	cbz	r5, 8004616 <_printf_i+0x19e>
 800460e:	2310      	movs	r3, #16
 8004610:	e7ac      	b.n	800456c <_printf_i+0xf4>
 8004612:	4827      	ldr	r0, [pc, #156]	@ (80046b0 <_printf_i+0x238>)
 8004614:	e7e9      	b.n	80045ea <_printf_i+0x172>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	f023 0320 	bic.w	r3, r3, #32
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	e7f6      	b.n	800460e <_printf_i+0x196>
 8004620:	4616      	mov	r6, r2
 8004622:	e7bd      	b.n	80045a0 <_printf_i+0x128>
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	6961      	ldr	r1, [r4, #20]
 800462a:	1d18      	adds	r0, r3, #4
 800462c:	6030      	str	r0, [r6, #0]
 800462e:	062e      	lsls	r6, r5, #24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	d501      	bpl.n	8004638 <_printf_i+0x1c0>
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0x1c6>
 8004638:	0668      	lsls	r0, r5, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0x1bc>
 800463c:	8019      	strh	r1, [r3, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	4616      	mov	r6, r2
 8004644:	e7bc      	b.n	80045c0 <_printf_i+0x148>
 8004646:	6833      	ldr	r3, [r6, #0]
 8004648:	1d1a      	adds	r2, r3, #4
 800464a:	6032      	str	r2, [r6, #0]
 800464c:	681e      	ldr	r6, [r3, #0]
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	2100      	movs	r1, #0
 8004652:	4630      	mov	r0, r6
 8004654:	f7fb fdcc 	bl	80001f0 <memchr>
 8004658:	b108      	cbz	r0, 800465e <_printf_i+0x1e6>
 800465a:	1b80      	subs	r0, r0, r6
 800465c:	6060      	str	r0, [r4, #4]
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	2300      	movs	r3, #0
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004668:	e7aa      	b.n	80045c0 <_printf_i+0x148>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	4632      	mov	r2, r6
 800466e:	4649      	mov	r1, r9
 8004670:	4640      	mov	r0, r8
 8004672:	47d0      	blx	sl
 8004674:	3001      	adds	r0, #1
 8004676:	d0ad      	beq.n	80045d4 <_printf_i+0x15c>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	079b      	lsls	r3, r3, #30
 800467c:	d413      	bmi.n	80046a6 <_printf_i+0x22e>
 800467e:	68e0      	ldr	r0, [r4, #12]
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	4298      	cmp	r0, r3
 8004684:	bfb8      	it	lt
 8004686:	4618      	movlt	r0, r3
 8004688:	e7a6      	b.n	80045d8 <_printf_i+0x160>
 800468a:	2301      	movs	r3, #1
 800468c:	4632      	mov	r2, r6
 800468e:	4649      	mov	r1, r9
 8004690:	4640      	mov	r0, r8
 8004692:	47d0      	blx	sl
 8004694:	3001      	adds	r0, #1
 8004696:	d09d      	beq.n	80045d4 <_printf_i+0x15c>
 8004698:	3501      	adds	r5, #1
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	9903      	ldr	r1, [sp, #12]
 800469e:	1a5b      	subs	r3, r3, r1
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dcf2      	bgt.n	800468a <_printf_i+0x212>
 80046a4:	e7eb      	b.n	800467e <_printf_i+0x206>
 80046a6:	2500      	movs	r5, #0
 80046a8:	f104 0619 	add.w	r6, r4, #25
 80046ac:	e7f5      	b.n	800469a <_printf_i+0x222>
 80046ae:	bf00      	nop
 80046b0:	08004835 	.word	0x08004835
 80046b4:	08004846 	.word	0x08004846

080046b8 <memmove>:
 80046b8:	4288      	cmp	r0, r1
 80046ba:	b510      	push	{r4, lr}
 80046bc:	eb01 0402 	add.w	r4, r1, r2
 80046c0:	d902      	bls.n	80046c8 <memmove+0x10>
 80046c2:	4284      	cmp	r4, r0
 80046c4:	4623      	mov	r3, r4
 80046c6:	d807      	bhi.n	80046d8 <memmove+0x20>
 80046c8:	1e43      	subs	r3, r0, #1
 80046ca:	42a1      	cmp	r1, r4
 80046cc:	d008      	beq.n	80046e0 <memmove+0x28>
 80046ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046d6:	e7f8      	b.n	80046ca <memmove+0x12>
 80046d8:	4402      	add	r2, r0
 80046da:	4601      	mov	r1, r0
 80046dc:	428a      	cmp	r2, r1
 80046de:	d100      	bne.n	80046e2 <memmove+0x2a>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ea:	e7f7      	b.n	80046dc <memmove+0x24>

080046ec <_sbrk_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	@ (8004708 <_sbrk_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fdd8 	bl	80012ac <_sbrk>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_sbrk_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_sbrk_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000370 	.word	0x20000370

0800470c <memcpy>:
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	f100 33ff 	add.w	r3, r0, #4294967295
 8004714:	d100      	bne.n	8004718 <memcpy+0xc>
 8004716:	4770      	bx	lr
 8004718:	b510      	push	{r4, lr}
 800471a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004722:	4291      	cmp	r1, r2
 8004724:	d1f9      	bne.n	800471a <memcpy+0xe>
 8004726:	bd10      	pop	{r4, pc}

08004728 <_realloc_r>:
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	4680      	mov	r8, r0
 800472e:	4615      	mov	r5, r2
 8004730:	460c      	mov	r4, r1
 8004732:	b921      	cbnz	r1, 800473e <_realloc_r+0x16>
 8004734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004738:	4611      	mov	r1, r2
 800473a:	f7ff bc4b 	b.w	8003fd4 <_malloc_r>
 800473e:	b92a      	cbnz	r2, 800474c <_realloc_r+0x24>
 8004740:	f7ff fbdc 	bl	8003efc <_free_r>
 8004744:	2400      	movs	r4, #0
 8004746:	4620      	mov	r0, r4
 8004748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800474c:	f000 f81a 	bl	8004784 <_malloc_usable_size_r>
 8004750:	4285      	cmp	r5, r0
 8004752:	4606      	mov	r6, r0
 8004754:	d802      	bhi.n	800475c <_realloc_r+0x34>
 8004756:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800475a:	d8f4      	bhi.n	8004746 <_realloc_r+0x1e>
 800475c:	4629      	mov	r1, r5
 800475e:	4640      	mov	r0, r8
 8004760:	f7ff fc38 	bl	8003fd4 <_malloc_r>
 8004764:	4607      	mov	r7, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d0ec      	beq.n	8004744 <_realloc_r+0x1c>
 800476a:	42b5      	cmp	r5, r6
 800476c:	462a      	mov	r2, r5
 800476e:	4621      	mov	r1, r4
 8004770:	bf28      	it	cs
 8004772:	4632      	movcs	r2, r6
 8004774:	f7ff ffca 	bl	800470c <memcpy>
 8004778:	4621      	mov	r1, r4
 800477a:	4640      	mov	r0, r8
 800477c:	f7ff fbbe 	bl	8003efc <_free_r>
 8004780:	463c      	mov	r4, r7
 8004782:	e7e0      	b.n	8004746 <_realloc_r+0x1e>

08004784 <_malloc_usable_size_r>:
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbc      	itt	lt
 800478e:	580b      	ldrlt	r3, [r1, r0]
 8004790:	18c0      	addlt	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
